var search_data = {"index":{"longSearchIndex":["relp","relp::client","relp::error","relp::server","relp::server::bind()","relp::server#bind()","relp::client::connect()","relp::server#destroy()","relp::error()","relp::server::new()","relp::server#on_receive()","relp::version()",""],"info":[["Relp","","Relp.html","",""],["Relp::Client","","Relp/Client.html","",""],["Relp::Error","","Relp/Error.html","",""],["Relp::Server","","Relp/Server.html","",""],["bind","Relp::Server","Relp/Server.html#method-c-bind","(port, cb = nil)","<p>Sugaring for spawning a new server without manual Relp::Engine init\n"],["bind","Relp::Server","Relp/Server.html#method-i-bind","(p1)","\n<pre>Binds a Relp engine listner to a given port. Note that this only binds to a port and doesn't start\nany ...</pre>\n"],["connect","Relp::Client","Relp/Client.html#method-c-connect","(sock_family = Socket::AF_INET, hostname = 'localhost', port = 518)","<p>Sugaring for spawning a new client without manual Relp::Engine init\n"],["destroy","Relp::Server","Relp/Server.html#method-i-destroy","()","\n<pre>API compat with Relp::Client and Relp::Engine - noop. This is a low level API.</pre>\n<p>Examples\n\n<pre>engine = Relp::Engine.new ...</pre>\n"],["error","Relp","Relp.html#method-c-error","(code)",""],["new","Relp::Server","Relp/Server.html#method-c-new","(p1)","\n<pre>Allocates a new Relp::Server instance and registers low level command callbacks with the engine.</pre>\n<p>Examples …\n"],["on_receive","Relp::Server","Relp/Server.html#method-i-on_receive","(p1)","\n<pre>Registers an on_receive callback for this Relp::Server instance. Accepts a Proc with an arity of 3 for ...</pre>\n"],["version","Relp","Relp.html#method-c-version","()","\n<pre>Returns the librelp version linked against.</pre>\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Relp</span>.<span class=\"ruby-identifier\">version</span>    =<span class=\"ruby-operator\">&gt;</span>  <span class=\"ruby-string\">'1.0.0'</span>\n</pre>\n"],["README","","README_rdoc.html","","<p>relp - binding for the RELP (Reliable Event Logging Protocol) protocol\n<p>© 2012 Lourens Naudé (methodmissing), …\n"]],"searchIndex":["relp","client","error","server","bind()","bind()","connect()","destroy()","error()","new()","on_receive()","version()","readme"]}}